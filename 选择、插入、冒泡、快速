def findKthLargest(self, nums: List[int], k: int) -> int:
        n = len(nums)
        # 选择排序 4944MS 15.5MB
        for i in range(n):
            cu_max = i
            for j in range(i + 1, n):
                if nums[j] > nums[cu_max]:
                    cu_max = j
            nums[cu_max], nums[i] = nums[i], nums[cu_max]
        return nums[k - 1]

        # 插入排序 4768MS 15.3MB
        for i in range(1, n):
            temp = nums[i]
            j = i - 1
            while  j >= 0 and temp > nums[j]:
                nums[j + 1] = nums[j]
                j -= 1
            j += 1
            nums[j] = temp
        return nums[k - 1]

        # 冒泡 超时
        for i in range(n):
            for j in range(n - 1 - i):
                if nums[j] < nums[j + 1]:
                    nums[j], nums[j + 1] = nums[j + 1], nums[j]
        return nums[k - 1]

        # 快速排序 4324MS 20.9MB
        def partition(arr,low,high): 
            i = ( low-1 )         # 最小元素索引
            pivot = arr[high]     
            for j in range(low , high): 
                # 当前元素小于或等于 pivot 
                if   arr[j] <= pivot: 
                    i = i+1 
                    arr[i],arr[j] = arr[j],arr[i] 
            arr[i+1],arr[high] = arr[high],arr[i+1] 
            return ( i+1 ) 
        def quickSort(arr,low,high): 
            if low < high: 
                pi = partition(arr,low,high) 
                quickSort(arr, low, pi-1) 
                quickSort(arr, pi+1, high) 
        quickSort(nums,0,n-1) 
        return nums[-k]
